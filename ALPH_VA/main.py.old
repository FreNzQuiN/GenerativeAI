# main.py

from core import context_manager, text_to_speech, action_router, language_model, plugin_manager
import time, asyncio
from plugins import translator, play_voice

plugin_manager.load_plugins()
translator_plugin = translator.TranslationPlugin()

def main():
    print("=== Virtual Assistant v0.1 ===")
    print("1. Bahasa Inggris\n")
    print("2. Bahasa Jepang\n")
    print("3. Bahasa Indonesia\n")

    set_language = input("Pilih bahasa (1/2/3): ")
    if set_language == "1":
        target_language = 'en'
        source_language = 'id'
    elif set_language == "2":
        target_language = 'ja'
        source_language = 'id'
    elif set_language == "3":
        target_language = 'id'
        source_language = 'id'
    
    
    print("Ketik 'exit' untuk keluar.")
    print("Ketik 'clear context' untuk menghapus sesi.")

    while True:
        user_input = input("[You]: ")
        if user_input.strip().lower() == "":
            print("Input tidak boleh kosong.")
            continue
        if user_input.strip().lower() == "exit":
            break
        if user_input.strip().lower() == "clear context":
            context_manager.archive_and_clear_session()
            continue
        
        final_input = user_input
        if source_language != target_language:
            final_input = translator_plugin.translate(user_input, target_language, source_language)
            print(f"Sending: {final_input}")
        
        context_manager.remember("user", final_input)

        response = action_router.route(final_input)
        if isinstance(response, str) and response.startswith("Perintah tidak dikenali"):
            context = context_manager.retrieve(limit=5)
            response = language_model.get_response(target_language, final_input, context)

        print(f"[Assistant]: {response}")
        if not isinstance(response, str) or not response.startswith("[Gemini Error]"):
            context_manager.remember("model", response)
        
        if target_language == "ja":
            translated_response = translator_plugin.translate(response, source_language, "ja")
            print(f"Translated: {translated_response}")
            text_to_speech.speak(translated_response, language="japanese", speaker=4)
        elif target_language == "en":
            text_to_speech.speak(response, language="english", rate=210)
        elif target_language == "id":
            text_to_speech.speak(response, language="indonesian", rate=210)
        # time.sleep(1)

if __name__ == "__main__":
    main()
